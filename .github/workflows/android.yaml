name: Android

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up signing key
        if: github.ref == 'refs/heads/main'
        run: |
          if [ ! -z "${{ secrets.KEY_STORE }}" ]; then
            echo keyStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> signing.properties
            echo keyAlias='${{ secrets.KEY_ALIAS }}' >> signing.properties
            echo keyPassword='${{ secrets.KEY_PASSWORD }}' >> signing.properties
            echo keyStore='${{ github.workspace }}/key.jks' >> signing.properties
            echo ${{ secrets.KEY_STORE }} | base64 --decode > ${{ github.workspace }}/key.jks
          fi

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'jetbrains'
          java-version: 21

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: platform-tools

      - name: Set up Android NDK
        env:
          ANDROID_NDK_VERSION: 29.0.14206865
        run: |
          sdkmanager --install "ndk;${{ env.ANDROID_NDK_VERSION }}"
          ANDROID_NDK_ROOT="${ANDROID_SDK_ROOT}/ndk/${{ env.ANDROID_NDK_VERSION }}"
          ANDROID_NDK_BUILD=`ls ${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/`
          ANDROID_NDK_PATH="${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/${ANDROID_NDK_BUILD}/bin"
          echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}" >> $GITHUB_ENV
          echo "ANDROID_NDK_PATH=${ANDROID_NDK_PATH}" >> $GITHUB_ENV
          echo "${ANDROID_NDK_PATH}" >> $GITHUB_PATH

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: aarch64-linux-android,x86_64-linux-android
          components: rust-src

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v5

      - name: Build pki-types
        working-directory: pki-types/src/main/jni
        run: ./build_jni.sh

      - name: Build with Gradle
        run: ./gradlew assembleRelease

      - name: Get release name
        if: success() && github.ref == 'refs/heads/main'
        id: release-name
        run: |
          name=`ls app/build/outputs/apk/release/*.apk | awk -F '(/|.apk)' '{print $6}'` && echo "name=${name}" >> $GITHUB_OUTPUT

      - name: Upload apk
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.release-name.outputs.name }}
          path: app/build/outputs/apk/release/*.apk*

      - name: Upload mapping
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.release-name.outputs.name }}-mapping
          path: app/build/outputs/mapping/release

      - name: Post to channel
        if: success() && github.ref == 'refs/heads/main'
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          if [ ! -z "${{ secrets.BOT_TOKEN }}" ]; then
            RELEASE_FILE=$(find app/build/outputs/apk/release -name "*-release.apk")
            ESCAPED=$(python3 -c 'import json,os; print(json.dumps(os.environ["COMMIT_MESSAGE"]))')
            curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup" \
              -F "chat_id=${CHANNEL_ID}" \
              -F "media=[{\"type\":\"document\",\"media\":\"attach://release\",\"caption\":${ESCAPED}}]" \
              -F "release=@${RELEASE_FILE}"
          fi
